{"version":3,"sources":["webpack:///./src/views/posts/streetwise.mdx"],"names":["h","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent","name","inject","$mdxComponents","default","computed","this","render","createElement","mdx","bind"],"mappings":"kIAEIA,E,sFAOEC,EAAc,GAGdC,EAAY,UAClB,SAASC,EAAT,GAGG,IAFDC,EAEC,EAFDA,WACGC,EACF,oBACD,mBAAsBJ,EAAtB,GAAuCI,EAAvC,mBAA0DD,EAA1D,QAA8E,gBAA9E,wBAEoB,+CAFpB,YAE+E,wBAF/E,UAEiH,4BAFjH,KAEkJ,OAFlJ,MAE+J,+DAF/J,MAEoO,IAFpO,QAEgP,gBAFhP,kOAKa,eALb,sBAMa,oCANb,IAMqD,uBANrD,QAMoF,WANpF,qBAOa,qCAPb,IAOsD,uBAPtD,QAOqF,eAMvFD,EAAWG,gBAAiB,EAEb,cACbC,KAAM,MACNC,OAAQ,CACNC,eAAgB,CACdC,QAAS,kBAAM,iBAAO,OAG1BC,SAAU,CACRP,WADQ,WAEN,OAAOQ,KAAKH,mBAGhBI,OAZa,SAYNC,GAEL,OADAd,EAAIe,OAAIC,KAAK,CAAEF,gBAAeV,WAAYQ,KAAKR,aACxCD,EAAW,CAAEC,WAAYQ,KAAKR","file":"js/post-streetwise-mdx.5c92a190.js","sourcesContent":["// vue babel plugin doesn't support pragma replacement\nimport { mdx } from '@mdx-js/vue'\nlet h;\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport PostHeader from \"@/components/PostHeader\";\nimport Media from \"@/components/Media\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <PostHeader title='A Tool That Accelerates the Work of Artists!' projectName='Streetwise VidMorpher' imageName='streetwise/login-page.png' date='2023' stack='(ReactJS, Typescript, After Effects, Firebase, Github CI/CD)' order='1' mdxType=\"PostHeader\" />\n    <p>{`The project is an extension for After Effects, featuring user management and an easy-to-use workflow.\nUsers can add data from a spreadsheet and create new versions of videos using a string template.`}</p>\n    <div class='blogGallery'>\n    <Media src='/work/streetwise/login-page-2.png' alt='streetwise-main-page' mdxType=\"Media\" />\n    <Media src='/work/streetwise/workflow-page.png' alt='streetwise-main-page' mdxType=\"Media\" />\n    </div>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport default {\n  name: 'Mdx',\n  inject: {\n    $mdxComponents: {\n      default: () => () => ({})\n    }\n  },\n  computed: {\n    components() {\n      return this.$mdxComponents()\n    }\n  },\n  render(createElement) {\n    h = mdx.bind({ createElement, components: this.components })\n    return MDXContent({ components: this.components })\n  }\n}\n   "],"sourceRoot":""}